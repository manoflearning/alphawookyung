#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

ll a, b, n, k;
ll C[45][45];

void init() {
    C[0][0] = 1;
    C[1][0] = C[1][1] = 1;
    FOR(i, 2, 41) {
        C[i][0] = C[i][i] = 1;
        FOR(j, 1, i) {
            C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
        }
    }
}

void input() {
    cin >> a >> b >> n >> k;

    if (a > b) swap(a, b);
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

    init();

	input();

    int idx = 0;
    FOR(i, 0, n + 1) {
        k -= C[n][i];
        if (k <= 0) {
            idx = i;
            break;
        }
    }
    
    cout << fixed;
    cout.precision(8);
    cout << log((double)a * b / 2) + idx * log(a * a) + (n - idx) * log(b * b) - n * log(a * a + b * b);

	return 0;
}