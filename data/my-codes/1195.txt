#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const ll INF = 1e18 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n, m;
vt<ll> a, b, r, c;
ll ans;

void input() {
    cin >> n >> m;
    a.resize(n + 1);
    b.resize(m + 1);
    EACH(i, a) cin >> i;
    EACH(i, b) cin >> i;
}

ll naive(int x, int y) {
    ll cost = 0;
    FOR(i, 1, x + 1) cost += r[i] + c[y];
   
    if (y == m) return cost;

    ll res = INF;
    FOR(i, 0, x + 1) res = min(res, naive(i, y + 1));
    
    return cost + res;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	input();

    r.resize(n + 1);
    c.resize(m + 1);

    FOR(n) r[n - i] = a[i] - a[i + 1];
    FOR(m) c[i + 1] = b[i + 1] - b[i];

    FOR(n) cout << "r[" << i + 1 << "] = " << r[i + 1] << '\n';
    FOR(m) cout << "c[" << i + 1 << "] = " << c[i + 1] << '\n';

    ans = n * b[0] + m * a[n];
    
    ll res = INF;
    FOR(i, 0, n + 1) {
        res = min(res, naive(i, 1));
    }
    
    cout << ans + res;

	return 0;
}