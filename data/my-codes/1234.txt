#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int flag;  
struct Seg {  
	vector<ll> t, lazy;

	void build(int n) {
		for (flag = 1; flag < n; flag <<= 1);
		t.resize(2 * flag);
		lazy.resize(2 * flag);

		for (int i = flag; i < flag + n; i++) t[i] = 1;
		for (int i = flag - 1; i >= 1; i--) t[i] = t[i << 1] + t[i << 1 | 1];
	}
	void modify(int l, int r, int op, int n = 1, int nl = 1, int nr = flag) {
		propagate(n, nl, nr);

		if (r < nl || nr < l) return;
		if (l <= nl && nr <= r) {
			lazy[n] = op;
			propagate(n, nl, nr);
			return;
		}

		int mid = (nl + nr) >> 1;
		modify(l, r, op, n << 1, nl, mid);
		modify(l, r, op, n << 1 | 1, mid + 1, nr);

		t[n] = t[n << 1] + t[n << 1 | 1];
	}
	ll query(int l, int r, int n = 1, int nl = 1, int nr = flag) {  
		propagate(n, nl, nr);

		if (r < nl || nr < l) return 0;
		if (l <= nl && nr <= r) return t[n];

		int mid = (nl + nr) / 2;
		return query(l, r, n << 1, nl, mid) + query(l, r, n << 1 | 1, mid + 1, nr);
	}
	void propagate(int n, int nl, int nr) {
		if (lazy[n] != 0) {
			if (n < flag) {
				lazy[n << 1] = lazy[n];
				lazy[n << 1 | 1] = lazy[n];
			}
            if (lazy[n] == 1) t[n] = (nr - nl + 1);
            if (lazy[n] == 2) t[n] = 0;
			lazy[n] = 0;
		}
	}
}seg;

int n, m, par[101010], in[101010], out[101010], cnt;
vt<int> chd[101010];

void dfs(int v, int par) {
    in[v] = ++cnt;
    for (auto& i : chd[v]) {
        if (i != par) dfs(i, v);
    }
    out[v] = ++cnt;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	cin >> n;
    for (int i = 1; i <= n; i++) {
        int p; cin >> p;
        par[i] = p;
        chd[p].push_back(i);
    }

    dfs(1, 0);

    seg.build(cnt);

    cin >> m;
    while (m--) {
        int op, idx;
        cin >> op >> idx;
        if (op == 1 || op == 2) {
            seg.modify(in[idx] + 1, out[idx] - 1, op);
        }
        if (op == 3) {
            cout << seg.query(in[idx] + 1, out[idx] - 1) / 2 << '\n';
        }
    }

	return 0;
}