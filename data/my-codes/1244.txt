#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int N;
vector<int> arr;

	for (int x = 0; x < arr.size(); x++) {
		for (int i = 0; i <= x; i++) {
			dp[x][1][arr[i]] = true;

			if (1 == N && arr[i] == 0) {
				print(x, 1, arr[i]);
				return 0;
			}
		}
	}
	
	for (int x = 1; x < arr.size(); x++) {
		for (int cnt = 2; cnt <= N; cnt++) {
			for (int left = 0; left < N; left++) {
				int nleft = (left - arr[x] + N) % N;
				dp[x][cnt][left] = dp[x - 1][cnt - 1][nleft] || dp[x - 1][cnt][left];

				if (cnt == N && left == 0 && dp[x][cnt][left]) {
					print(x, cnt, left);
					return 0;
				}
			}
		}
	}

	cout << -1 << '\n';

	return 0;
}

void print(int x, int cnt, int left) {
	int nleft = (left - arr[x] + N) % N;

	if (cnt == 1) {
		if (left == arr[x]) cout << arr[x] << ' ';
		else print(x - 1, cnt, left);
	}
	else if (dp[x - 1][cnt - 1][nleft]) {
		cout << arr[x] << ' ';
		print(x - 1, cnt - 1, nleft);
	}
	else print(x - 1, cnt, left);
}