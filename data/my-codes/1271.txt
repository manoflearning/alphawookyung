#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const ll INF = 1e18 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

struct wv {
    ll w; int v;
};

int n, m;
vt<wv> adj[20202];
ll w[20202], dp[20202];

ll ans1;
vt<int> ans2;

void init() {
    FOR(20202) {
        adj[i].clear();
        w[i] = 0; dp[i] = -INF;
    }
    ans2.clear();
}

void input() {
    cin >> n >> m;
    FOR(v, 1, n + 1) cin >> w[v];
    FOR(m) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({ w, v });
    }
}

ll f(int v) {
    ll& ret = dp[v];
    if (ret != -INF) return ret;

    ret = w[v];
    EACH(i, adj[v]) {
        ret = max(ret, w[v] - i.w + f(i.v));
    }

    return ret;
}

void track(int v) {
    ans2.push_back(v);

    if (dp[v] == ans1) {
        return;
    }

    EACH(i, adj[v]) {
        if (dp[v] == w[v] - i.w + dp[i.v]) {
            track(i.v);
            return;
        }
    }
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;
	FOR(tt, 1, tc + 1) {
        init();

		input();

        ll ans1 = f(1);
        track(1);
        cout << ans1 << ' ' << sz(ans2) << '\n';
        EACH(i, ans2) cout << i << ' ';
        cout << '\n';
	}

	return 0;
}