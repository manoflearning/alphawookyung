#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

const int MAXV = 202020;

int n, m, label[MAXV], labelCnt;
int SCCnum[MAXV], SCCcnt, finished[MAXV];
vector<int> adj[MAXV];
stack<int> stk;
vector<vector<int>> SCC;

int p, isRed[MAXV], isBlue[MAXV];

void input() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
	}
    cin >> p;
    FOR(p) {
        int v; cin >> v;
        isRed[v] = 1;
    }
    FOR(p) {
        int v; cin >> v;
        isBlue[v] = 1;
    }
}

int dfs(int v) {
	label[v] = labelCnt++;
	stk.push(v);

	int ret = label[v];
	for (int next : adj[v]) {
		if (label[next] == -1) ret = min(ret, dfs(next));
		else if (!finished[next]) ret = min(ret, label[next]);
	}
	
	if (ret == label[v]) {
		vector<int> vSCC;
		while (1) {
			int t = stk.top();
			stk.pop();

			vSCC.push_back(t);
			SCCnum[t] = SCCcnt;
			finished[t] = 1;

			if (t == v) break;
		}

		SCC.push_back(vSCC);
		SCCcnt++;
	}

	return ret;
}

void getSCC() {
	memset(label, -1, sizeof(label));

	for (int v = 1; v <= n; v++)
		if (label[v] == -1) dfs(v);
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	input();

    getSCC();

    int ans = 1;
    EACH(arr, SCC) {
        int rCnt = 0, bCnt = 0;
        EACH(j, arr) {
            if (isRed[j]) rCnt++;
            if (isBlue[j]) bCnt++;
        }

        if (rCnt ^ bCnt) ans = 0;
    }

    if (ans) cout << "YES";
    else cout << "NO";

	return 0;
}