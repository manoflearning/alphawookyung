#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

const int MAX = 1e7;

bool isPrime[MAX + 1];
vector<int> prime(1, 2);

void getPrime() {
	fill(isPrime + 2, isPrime + MAX + 1, 1);

	for (ll i = 4; i <= MAX; i += 2)
		isPrime[i] = 0;
	for (ll i = 3; i <= MAX; i++) {
		if (isPrime[i]) prime.push_back(i);
		for (ll j = i * i; j <= MAX; j += i * 2)
			isPrime[j] = 0;
	}
}

int n, vi[9];
ll p10[9];
set<int> s;
vt<int> a, b;

void init() {
    s.clear();
    a.clear();
}

void pc() {
    ll res = 0;
    FOR(i, sz(b)) {
        res += p10[i] * b[i];
    }
    if (isPrime[res]) {
        s.insert(res);
    }
}

void f(int idx) {
    pc();

    if (idx == n) return;

    FOR(i, n) {
        if (vi[i]) continue;
        vi[i] = 1;
        b.push_back(a[i]);
        f(idx + 1);
        vi[i] = 0;
        b.pop_back();
    }
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);
    
    getPrime();
    p10[0] = 1;
    FOR(i, 1, 9) p10[i] = 10 * p10[i - 1];

	int tc; cin >> tc;

    FOR(tc) {
        init();

        string t; cin >> t;
        n = sz(t);
        EACH(i, t) {
            a.push_back(i - '0');
        }

        f(0);

        cout << sz(s) << '\n';
    }

	return 0;
}