#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int flag;  
struct Seg {  
	vector<ll> t, cnt;

	void build(int n) {
		for (flag = 1; flag < n; flag <<= 1);
		t.resize(2 * flag);
		cnt.resize(2 * flag);

	}
	void modify(int l, int r, int val, int n = 1, int nl = 1, int nr = flag) {
		if (r < nl || nr < l) return;
		
		if (l <= nl && nr <= r) cnt[n] += val;
		else {
			int mid = (nl + nr) >> 1;
			modify(l, r, val, n << 1, nl, mid);
			modify(l, r, val, n << 1 | 1, mid + 1, nr);
		}
		
		if (cnt[n]) t[n] = nr - nl + 1;
		else {
			if (nl == nr) t[n] = 0;
			else t[n] = t[n << 1] + t[n << 1 | 1];
		}
	}
	ll query(int l, int r, int n = 1, int nl = 1, int nr = flag) {  
		if (r < nl || nr < l) return 0;
		if (l <= nl && nr <= r) return t[n];

		int mid = (nl + nr) / 2;
		return query(l, r, n << 1, nl, mid) + query(l, r, n << 1 | 1, mid + 1, nr);
	}
}seg;

struct LineSeg {
	int ys, ye, isO;
};

const int mxy = 30001;

int n;
vt<LineSeg> a[30303];

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	cin >> n;
	FOR(n) {
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		x1++, y1++, x2++, y2++;
		a[x1].push_back({ y1, y2, 1 });
		a[x2].push_back({ y1, y2, 0 });
	}

	seg.build(mxy);

	ll ans = 0;
	FOR(i, 1, 30303) {
		EACH(j, a[i]) {
			if (j.isO) seg.modify(j.ys, j.ye - 1, 1);
			else seg.modify(j.ys, j.ye - 1, -1);
		}

		ans += seg.query(1, mxy);
	}

	cout << ans;

	return 0;
}