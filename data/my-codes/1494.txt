#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

ll x, dp[5000][2];

ll f(int t, int bit) {
    ll& ret = dp[t][bit];
    if (ret != -1) return ret;
    if (t == x) {
        if (bit == 0) return ret = 1;
        if (bit == 1) return ret = 0;
    }
    if (t > x) return ret = INF;

    ret = INF;
    ret = min(ret, f(t + 10, bit) + 1);
    ret = min(ret, f(t + 60, bit) + 1);
    ret = min(ret, f(t + 600, bit) + 1);
    if (!bit) {
        if (t > 0) ret = min(ret, f(t, 1) + 1);
        if (t == 0) ret = min(ret, f(30, 1) + 1);
    }
    if (bit) ret = min(ret, f(t + 30, bit) + 1);

    return ret;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);
    
    FOR(5000) {
        FOR(j, 2) {
            dp[i][j] = -1;
        }
    }

	string s; cin >> s;

    x += 10 * (s[0] - '0') + (s[1] - '0');
    x *= 60;
    x += 10 * (s[3] - '0') + (s[4] - '0');
    
    cout << f(0, 0) << '\n';

	return 0;
}