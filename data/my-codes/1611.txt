#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n;
ll cnt[202020], w[202020], psum[202020];
vector<ll> c;
pll a[101010];

void cc() {
    c.push_back(-INF);
    for (auto& i : a) {
        c.push_back(i.fr);
        c.push_back(i.sc);
    }

    sort(all(c));
    c.erase(unique(all(c)), c.end());
    
    for (auto& i : a) {
        i.fr = lower_bound(all(c), i.fr) - c.begin();
        i.sc = lower_bound(all(c), i.sc) - c.begin();
    }

    for (int i = 1; i + 1 < sz(c); i++) {
        w[i] = c[i + 1] - c[i];
    }
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> a[i].fr >> a[i].sc;

    cc();

    for (int i = 1; i <= n; i++) {
        cnt[a[i].fr]++, cnt[a[i].sc]--;
    }

    for (int i = 1; i < sz(c); i++)
        cnt[i] += cnt[i - 1];

    ll sum = 0;

    for (int i = 1; i < sz(c); i++) {
        if (cnt[i] == 1) psum[i] += w[i];
        psum[i] += psum[i - 1];
        if (cnt[i]) sum += w[i];
    }

    ll ans = 0;
    for (int i = 1; i <= n; i++) {
        ans = max(ans, sum - psum[a[i].sc - 1] + psum[a[i].fr - 1]);
    }

    cout << ans;

	return 0;
}
