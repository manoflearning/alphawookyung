#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 1, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, 0, 0, 0, 1, -1, 1, -1 };

const int MAX = 2525;

int N;
vector<int> p(MAX + 1, -1);

int find(int x) {
	if (p[x] < 0) return x;
	return p[x] = find(p[x]);
}

void merge(int a, int b) {
	int A = find(a), B = find(b);
	if (A == B) return;
	p[A] += p[B];
	p[B] = A;
}

int n, m;
vt<vt<int>> a;

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	cin >> n >> m;
    a.resize(n);

    FOR(n) {
        string s; cin >> s;
        EACH(j, s) a[i].push_back(j - 'A'); 
    }

    int ans = 0;
    FOR(i, n) {
        FOR(j, m) {
            FOR(k, 2) {
                int y = i + dy[k], x = j + dx[k];
                if (y < 0 || n <= y) continue;
                if (x < 0 || m <= x) continue;
                if (a[y][x] != a[i][j]) continue;

                if (find(y * 50 + x) == find(i * 50 + j)) {
                    ans = 1;
                }
                merge(y * 50 + x, i * 50 + j);
            }
        }
    }

    if (ans) cout << "Yes";
    else cout << "No";

	return 0;
}