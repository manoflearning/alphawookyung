#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n, m;
int lad[101], sn[101], nxt[101], dist[101];

int bfs() {
    deque<int> dq;
    dq.push_back(1);
    dist[1] = 0;

    while (sz(dq)) {
        int v = dq.front();
        dq.pop_front();

        if (v == 100) return dist[v];

        if (lad[v]) {
            if (dist[nxt[v]] > dist[v]) {
                dist[nxt[v]] = dist[v];
                dq.push_front(nxt[v]);
            }
        }
        else if (sn[v]) {
            if (dist[nxt[v]] > dist[v]) {
                dist[nxt[v]] = dist[v];
                dq.push_front(nxt[v]);
            }
        }
        else {
            for (int i = 1; i <= 6; i++) {
                if (v + i <= 100 && dist[v + i] > dist[v] + 1) {
                    dist[v + i] = dist[v] + 1;
                    dq.push_back(v + i);
                }
            }
        }
    }
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

    FOR(101) dist[i] = INF;

	cin >> n >> m;
    FOR(n) {
        int x, y;
        cin >> x >> y;
        lad[x] = 1, nxt[x] = y;
    }
    FOR(m) {
        int x, y;
        cin >> x >> y;
        sn[x] = 1, nxt[x] = y;
    }

    cout << bfs();

	return 0;
}