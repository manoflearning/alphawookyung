#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int flag;  
struct Seg {  
	vector<ll> t;

	void build(int n) {
		t.clear();
		for (flag = 1; flag < n; flag <<= 1);
		t.resize(2 * flag);

	}
	void modify(int p) {  
		for (t[p += flag - 1]++; p > 1; p >>= 1) t[p >> 1] = t[p] + t[p ^ 1];
	}
	ll query(int l, int r, int n = 1, int nl = 1, int nr = flag) {  
		if (r < nl || nr < l) return 0;
		if (l <= nl && nr <= r) return t[n];

		int mid = (nl + nr) / 2;
		return query(l, r, n << 1, nl, mid) + query(l, r, n << 1 | 1, mid + 1, nr);
	}
}seg;

struct point {
	ll x, y;
	bool operator<(const point& rhs) const {
		if (x != rhs.x) return x < rhs.x;
		return y > rhs.y;
	}
};

int n;
vt<point> a;

void init() {
	n = 0;
	a.clear();
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;
	while (tc--) {
		init();

		cin >> n;
		a.resize(n);
		EACH(i, a) cin >> i.x >> i.y;

		vt<ll> b;
		EACH(i, a) {
			b.push_back(i.x);
			b.push_back(i.y);
		}
		sort(all(b));
		b.erase(unique(all(b)), b.end());
		EACH(i, a) {
			i.x = lower_bound(all(b), i.x) - b.begin() + 1;
			i.y = lower_bound(all(b), i.y) - b.begin() + 1;
		}
		seg.build(sz(b));

		sort(all(a));
		ll ans = 0;
		EACH(i, a) {
			ans += seg.query(i.y, sz(b));
			seg.modify(i.y);
		}

		cout << ans << '\n';
	}

	return 0;
}