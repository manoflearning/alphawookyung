#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
const int dx[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

struct Point {
    int x, y;
};

int k, num[1212][1212], pow2, coCnt;

void init() {
    FOR(pow2) FOR(j, pow2) num[i][j] = 0;
    coCnt = 0;
}

int findDir(const Point& sp, const Point& ep, const Point& pp) {
    int midx = (sp.x + ep.x) / 2;
    int midy = (sp.y + ep.y) / 2;

    int bit1 = (pp.x <= midx), bit2 = (pp.y <= midy);
    if (bit1 == 1 && bit2 == 1) return 0;
    if (bit1 == 0 && bit2 == 1) return 1;
    if (bit1 == 0 && bit2 == 0) return 2;
    if (bit1 == 1 && bit2 == 0) return 3;
    return 0;
}

void recursion(const Point& sp, const Point& ep, const Point& pp) {
    if (ep.x - sp.x + 1 == 2) {
        vt<Point> p;
        FOR(i, sp.x, ep.x + 1) {
            FOR(j, sp.y, ep.y + 1) {
                if (i == pp.x && j == pp.y) continue;
                p.push_back({ i, j });
            }
        }

        int co = (coCnt++ & 1 ? 1 : 2);
        EACH(i, p) num[i.x][i.y] = co;