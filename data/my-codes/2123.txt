#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

struct se {
    int s, e;
    bool operator<(const se& rhs) const {
        if (e ^ rhs.e) return e < rhs.e;
        return s > rhs.s;
    }
};

int n, k;
vt<se> a;
int prv, ans;
multiset<int> ms;

void input() {
    cin >> n >> k;
    a.resize(n);
    EACH(i, a)
        cin >> i.s >> i.e;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	input();

    sort(all(a));

    FOR(k - 1) ms.insert(0);

    EACH(i, a) {
        if (prv < i.s) {
            if (ms.empty()) {
                prv = i.e;
                ans++;
            }
            else {
                auto it = ms.lower_bound(i.s);
                if (it == ms.begin()) {
                    prv = i.e;
                    ans++;
                }
                else {
                    it--;
                    ms.erase(it);
                    ms.insert(i.e);
                }
            }
        }
    }

    cout << ans;

	return 0;
}