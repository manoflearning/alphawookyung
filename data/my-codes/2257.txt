#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n, q;
vt<int> a;

int cal(int cnt) {
    int x = q;
    EACH(i, a) {
        if (x == 0) continue;
        else if (x < i) {
            if (cnt) cnt--;
            else x--;
        }
    }
    return x > 0;
}

void cal2(int cnt) {
    int x = q;
    EACH(i, a) {
        if (x == 0) cout << 0;
        else if (x < i) {
            if (cnt) { cnt--; cout << 0; }
            else { x--; cout << 1; }
        }
        else cout << 1;
    }
    cout << '\n';
}

int cal3(int cnt) {
    int ret = 0, x = q;
    EACH(i, a) {
        if (x == 0) continue;
        else if (x < i) {
            if (cnt) cnt--;
            else x--, ret++;
        }
        else ret++;
    }
    return ret;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;
    FOR(tt, 1, tc + 1) {
        cin >> n >> q;

        a.resize(n);
        EACH(i, a) cin >> i;
        
        int l = 0, r = n;
        while (l < r) {
            int mid = (l + r) >> 1;
            
            if (cal(mid)) r = mid;
            else l = mid + 1;
        }

        int res1 = cal3(l - 1), res2 = cal3(l);
        if (res1 >= res2) cal2(l - 1);
        else cal2(l);
    }

	return 0;
}