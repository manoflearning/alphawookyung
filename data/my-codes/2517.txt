#include <bits/stdc++.h>
using namespace std;
#define sz(x) (int)(x).size()

int n, m;
vector<int> adj[2020];
vector<int> vi, path;

void init() {
    for (int i = 1; i <= n; i++) adj[i].clear();
    vi.clear(); path.clear();
}

void input() {
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
}

vector<int> stk;
void dfs(int v, int prv, int st) {
    vi[v] = 1;
    stk.push_back(v);
    for (auto& i : adj[v]) {
        if (i == prv) continue;
        if (i == st && path.empty()) path = stk;
    }
    for (auto& i : adj[v]) {
        if (i == prv) continue;
        if (!vi[i]) dfs(i, v, st);
    }
    stk.pop_back();
}

void makeAnswer() {
    cout << sz(path) + 2 << '\n';
    for (int i = 0; i < sz(path); i++) {
        int u = path[i], v = path[(i + 1) % sz(path)];
        cout << u << ' ' << v << '\n';
    }

    vector<int> banned(n + 1);
    for (auto& i : path) banned[i] = 1;

    int st = path[0], cnt = 0;
    for (auto& i : adj[st]) {
        if (banned[i]) continue;
        cout << st << ' ' << i << '\n';
        if (++cnt == 2) break;
    }
}

int main() {

    cin.tie(NULL); cout.tie(NULL);
    ios_base::sync_with_stdio(false);

    int tc; cin >> tc;
    for (int tt = 1; tt <= tc; tt++) {
        input();

        for (int v = 1; v <= n; v++) {
            if (sz(adj[v]) >= 4) {
                vi.clear();
                vi.resize(n + 1);
                dfs(v, -1, v);
            }
        }

        if (path.empty()) cout << "NO\n";
        else {
            cout << "YES\n";
            makeAnswer();
        }

        init();
    }
}
