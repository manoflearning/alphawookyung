#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

const int MXP = 498;

int isP[40404];
vt<int> P;
ll dp[40404][MXP + 5];

void init() {
    for (int i = 1; i <= 40000; i++) {
        vt<int> s;
        for (int d = 0; pow(10, d) <= i; d++) {
            s.push_back(i / (int)pow(10, d) % 10);
        }

        int res = 1;
        for (int i = 0; i < sz(s); i++) {
            if (s[i] != s[sz(s) - i - 1]) res = 0;
        }

        if (res) P.push_back(i);
    }

    FOR(40404) {
        FOR(j, MXP) {
            dp[i][j] = -1;
        }
    }
}

ll f(int x, int y) {
    ll& ret = dp[x][y];
    if (ret != -1) return ret;
    if (x == 0) return ret = 1;
    if (y == MXP) return ret = 0;
    if (x < P[y]) return ret = 0;
    
    return ret = (f(x, y + 1) + f(x - P[y], y)) % MOD;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

    init();
    
	int tc; cin >> tc;

    while (tc--) {
        int n; cin >> n;

        cout << f(n, 0) << '\n';
    }

	return 0;
}