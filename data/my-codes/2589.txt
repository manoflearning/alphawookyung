#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

vt<xp> a;

int flag;  
struct SegL {  
	vector<ll> t, lazy, cnt;

	void build(int n) {
        t.clear();
        lazy.clear();
        cnt.clear();
		for (flag = 1; flag < n; flag <<= 1);
		t.resize(2 * flag);
		lazy.resize(2 * flag);
        cnt.resize(2 * flag);

	}
	void modify(int l, int r, int bit, int n = 1, int nl = 1, int nr = flag) {
		propagate(n, nl, nr);

		if (r < nl || nr < l) return;
		if (l <= nl && nr <= r) {
			lazy[n] = bit * (a[nl].x - a[l].x + 1);
            cnt[n] = 1;
			propagate(n, nl, nr);
			return;
		}

		int mid = (nl + nr) >> 1;
		modify(l, r, n << 1, nl, mid);
		modify(l, r, n << 1 | 1, mid + 1, nr);

		t[n] = t[n << 1] + t[n << 1 | 1];
	}
	ll query(int l, int r, int n = 1, int nl = 1, int nr = flag) {  
		propagate(n, nl, nr);

		if (r < nl || nr < l) return 0;
		if (l <= nl && nr <= r) return t[n];

		int mid = (nl + nr) / 2;
		return query(l, r, n << 1, nl, mid) + query(l, r, n << 1 | 1, mid + 1, nr);
	}
	void propagate(int n, int nl, int nr) {
		if (lazy[n] != 0) {
            ll len = nr - nl + 1;
			if (n < flag) {
				lazy[n << 1] += lazy[n];
				lazy[n << 1 | 1] += lazy[n] + cnt[n] * len / 2;
                cnt[n << 1] += cnt[n];
                cnt[n << 1 | 1] += cnt[n];
			}
            t[n] += (2 * lazy[n] + cnt[n] * (len - 1)) * len / 2;
			lazy[n] = cnt[n] = 0;
		}
	}
}segl;

struct SegR {  
	vector<ll> t, lazy, cnt;

	void build(int n) {
        t.clear();
        lazy.clear();
        cnt.clear();
		for (flag = 1; flag < n; flag <<= 1);
		t.resize(2 * flag);
		lazy.resize(2 * flag);
        cnt.resize(2 * flag);

	}
	void modify(int l, int r, int n = 1, int nl = 1, int nr = flag) {
		propagate(n, nl, nr);

		if (r < nl || nr < l) return;
		if (l <= nl && nr <= r) {
			lazy[n] = r - nr + 1;
            cnt[n] = 1;
			propagate(n, nl, nr);
			return;
		}

		int mid = (nl + nr) >> 1;
		modify(l, r, n << 1, nl, mid);
		modify(l, r, n << 1 | 1, mid + 1, nr);

		t[n] = t[n << 1] + t[n << 1 | 1];
	}
	ll query(int l, int r, int n = 1, int nl = 1, int nr = flag) {  
		propagate(n, nl, nr);

		if (r < nl || nr < l) return 0;
		if (l <= nl && nr <= r) return t[n];

		int mid = (nl + nr) / 2;
		return query(l, r, n << 1, nl, mid) + query(l, r, n << 1 | 1, mid + 1, nr);
	}
	void propagate(int n, int nl, int nr) {
		if (lazy[n] != 0) {
            ll len = nr - nl + 1;
			if (n < flag) {
				lazy[n << 1 | 1] += lazy[n];
				lazy[n << 1] += lazy[n] + cnt[n] * len / 2;
                cnt[n << 1 | 1] += cnt[n];
                cnt[n << 1] += cnt[n];
			}
            t[n] += (2 * lazy[n] + cnt[n] * (len - 1)) * len / 2;
			lazy[n] = cnt[n] = 0;
		}
	}
}segr;

struct xp {
    ll x, p;

    bool operator<(const xp& rhs) const {
        return x < rhs.x;
    }
};

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;
    FOR(tt, 1, tc + 1) {
        int n, m;
        cin >> n >> m;

        vt<xp> a(n + 1);
        FOR(n) cin >> a[i + 1].x >> a[i + 1].p;

        sort(a.begin() + 1, a.end());

        segl.build(n);
        segr.build(n);
    }

	return 0;
}