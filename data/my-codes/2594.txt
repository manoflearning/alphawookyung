#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n, deg[202020], rt = -1; 
vt<int> adj[202020];

void init() {
	FOR(n + 1) {
		deg[i] = 0;
		adj[i].clear();
	}
	n = 0, rt = -1;
}

int f(int v, int prv) {
	int ret = 0, cnt = 0;
	EACH(i, adj[v]) {
		if (i == prv) continue;
		int res = f(i, v);
		if (res) ret += res;
		else cnt++;
	}
	return ret + max(0, cnt - 1);
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;

	while (tc--) {
		cin >> n;
		FOR(n - 1) {
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
			deg[u]++, deg[v]++;
		}

		if (n == 1) cout << 0 << '\n';
		else {
			int cnt1 = 0, cnt2 = 0;
			FOR(i, 1, n + 1) {
				if (deg[i] == 1) cnt1++;
				if (deg[i] == 2) cnt2++;
				if (deg[i] >= 3) rt = i;
			}

			if (cnt1 == 2 && cnt2 == n - 2) cout << 1 << '\n';
			else cout << f(rt, 0) << '\n';
		}

		init();
	}

	return 0;
}