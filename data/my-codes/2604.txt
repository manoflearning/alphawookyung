#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first 
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n, dp[303030], siz[303030];
vt<int> adj[303030], chd[303030];

void dfs(int now, int prv) {
    siz[now] = 1;
    EACH(i, adj[now]) {
        if (i == prv) continue;
        chd[now].push_back(i);
        dfs(i, now);
        siz[now] += siz[i];
    }
}

void f(int now) {
    if (sz(chd[now]) == 0) return;
    int u = chd[now][0], v = (sz(chd[now]) == 1 ? -1 : chd[now][1]);
    if (v == -1) {
        f(u);
        dp[now] = siz[u] - 1;
    }
    else {
        f(u); f(v);
        dp[now] = max(dp[u] + siz[v] - 1, dp[v] + siz[u] - 1);
    }
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;

    while (tc--) {
        cin >> n;
        FOR(n - 1) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        dfs(1, 0);

        f(1);
        cout << dp[1] << '\n';

        FOR(i, 1, n + 1) {
            dp[i] = siz[i] = 0;
            adj[i].clear(); chd[i].clear();
        }
    }

	return 0;
}