#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const ll INF = 1e18 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

struct Edge {
    int u, v;
    ll w;
};

int n, m;
ll adj[303][303];
vt<Edge> e;

void init() {
    FOR(303) {
        FOR(j, 303) {
            adj[i][j] = INF;
        }
    }
}

void input() {
    cin >> n >> m;
    e.resize(m);
    EACH(i, e) {
        cin >> i.u >> i.v >> i.w;
        adj[i.u][i.v] = adj[i.v][i.u] = i.w;
    }
}

void floyd() {
	for (int i = 1; i <= n; i++) adj[i][i] = 0;

	for (int k = 1; k <= n; k++) {
		for (int u = 1; u <= n; u++) {
			for (int v = 1; v <= n; v++) {
				adj[u][v] = min(adj[u][v], adj[u][k] + adj[k][v]);
			}
		}
	}
}

int f() {
    int ret = 0;

    EACH(i, e) {
        int res = 0;
        FOR(k, 1, n + 1) {
            if (k == i.u || k == i.v) continue;

            if (adj[i.u][k] + adj[k][i.v] <= i.w) res = 1;
        }
        ret += res;
    }

    return ret;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	init();

    input();

    floyd();

    cout << f();

	return 0;
}