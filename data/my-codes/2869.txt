#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int n;
ll x, y, sumx, sumy;
vt<ll> xx, yy;
ll dix, diy;
int dpx[505][5050], dpy[505][5050];

int fx(int idx, ll sum) {
	int& ret = dpx[idx][sum];
	if (idx == sz(xx)) {
		return ret = (sum == dix); 
	}
	if (ret != -1) return ret;

	ret = 0;
	ret |= fx(idx + 1, sum);
	ret |= fx(idx + 1, sum + 2 * xx[idx]);

	return ret;
}

int fy(int idx, ll sum) {
	int& ret = dpy[idx][sum];
	if (idx == sz(yy)) {
		return ret = (sum == diy);
	}
	if (ret != -1) return ret;

	ret = 0;
	ret |= fy(idx + 1, sum);
	ret |= fy(idx + 1, sum + 2 * yy[idx]);

	return ret;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);
	
	FOR(505) {
		memset(dpx[i], -1, sizeof(dpx[i]));
		memset(dpy[i], -1, sizeof(dpy[i]));
	}

	cin >> n >> x >> y;

	FOR(n) {
		ll val; cin >> val;
		if (i == 0) x -= val;
		else if (i & 1) {
			sumy += val;
			yy.push_back(val);
		}
		else {
			sumx += val;
			xx.push_back(val);
		}
	}

	if (sumx < abs(x) || sumy < abs(y)) {
		cout << "No";
		return 0;
	}

	dix = sumx - abs(x), diy = sumy - abs(y);

	if (fx(0, 0) && fy(0, 0)) cout << "Yes";
	else cout << "No";

	return 0;
}