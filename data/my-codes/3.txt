
struct Point {
    ll x, y;
    bool operator<(const Point& rhs) const {
        return tie(x, y) < tie(rhs.x, rhs.y);
    }
};

struct Line {
    int u, v; ll dx, dy; 
    bool operator<(const Line& rhs) const {
        if (dy * rhs.dx != rhs.dy * dx) return dy * rhs.dx < rhs.dy * dx;
        return tie(u, v) < tie(rhs.u, rhs.v);
    }
    bool operator==(const Line& rhs) const {
        return dy * rhs.dx == rhs.dy * dx;
    }
};

int n, pos[2020];
Point p[2020];

void bulldozerTrick() {
    sort(p + 1, p + 1 + n);
    for (int i = 1; i <= n; i++) pos[i] = i;

    vector<Line> arr;
    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            arr.push_back({ i, j, p[j].x - p[i].x, p[j].y - p[i].y });
        }
    }
    sort(arr.begin(), arr.end());

    for (int i = 0, j = 0; i < arr.size(); i = j) {
        while (j < arr.size() && arr[j] == arr[i]) j++; 
        for (int k = i; k < j; k++) {
            int u = arr[k].u, v = arr[k].v;
            swap(p[pos[u]], p[pos[v]]);
            swap(pos[u], pos[v]);
        }

    }
}