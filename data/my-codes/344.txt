#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

struct tet {
	int bo, a[3];
};

tet x, y;

void input() {
	cin >> x.bo >> x.a[0] >> x.a[1] >> x.a[2];
	cin >> y.bo >> y.a[0] >> y.a[1] >> y.a[2];
}

int check(tet x) {
	if (x.bo != y.bo) return 0;

	int ret = 0;
	FOR(3) {
		if (x.a[0] == y.a[0] && x.a[1] == y.a[1] && x.a[2] == y.a[2]) ret = 1;

		int tmp = x.a[0];
		x.a[0] = x.a[1];
		x.a[1] = x.a[2];
		x.a[2] = tmp;
	}

	return ret;
}

int f() {
	if (check(x)) return 1;
	if (check({ x.a[0], x.bo, x.a[2], x.a[1] })) return 1;
	if (check({ x.a[1], x.a[2], x.bo, x.a[0] })) return 1;
	if (check({ x.a[2], x.a[1], x.a[0], x.bo })) return 1;

	return 0;
}

void solve() {
	input();

	cout << f();
}

int main() {
	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int tc; cin >> tc;
	
	FOR(tc) {
		solve();
		cout << '\n';
	}

	return 0;
}
