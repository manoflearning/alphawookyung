
#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 998244353;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

struct Matrix {
    vector<vector<ll>> a;
    Matrix operator*(const Matrix& rhs) const {
        Matrix ret;
        ret.a.resize(sz(a), vector<ll>(sz(rhs.a[0])));
        for (int y = 0; y < sz(ret.a); y++) {
            for (int x = 0; x < sz(ret.a[y]); x++) {
                ll sum = 0;
                for (int i = 0; i < sz(a[y]); i++) {
                    sum = (sum + a[y][i] * rhs.a[i][x]) % MOD;
                }
                ret.a[y][x] = sum;
            }
        }
        return ret;
    }
};
Matrix matrixPower(const Matrix& val, ll exp) {
    if (exp == 1) return val;
    Matrix res = matrixPower(val, exp / 2);
    Matrix ret = res * res;
    if (exp & 1) ret = ret * val;
    return ret;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

    vector<int> a = { 0, 1, 1, 1, 2, 2, 3, 4, 5, 7, 9 };

	int tc; cin >> tc;
	for (int tt = 1; tt <= tc; tt++) {
		ll n; cin >> n;

        if (n <= 10) {
            cout << a[n] << '\n';
            continue;
        }

        Matrix x;
        x.a.resize(10, vector<ll>(10));
        x.a[0][0] = x.a[0][4] = 1;
        for (int i = 1; i < 10; i++)
            x.a[i][i - 1] = 1;

        Matrix res = matrixPower(x, n - 10);
        ll ans = 0;
        for (int i = 0; i < 10; i++)
            ans = (ans + res.a[0][i] * a[10 - i]) % MOD;
        cout << ans << '\n';
	}

	return 0;
}