#include <bits/stdc++.h>
#include <cassert>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fr first
#define sc second
#define vt vector
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define EXPAND( x ) x 
#define F_OR(i, a, b, s) for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) EXPAND( GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1) )
#define FOR(...) EXPAND( F_ORC(__VA_ARGS__ )(__VA_ARGS__) )
#define EACH(x, a) for (auto& x : a)

const double EPS = 1e-9;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int dy[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
const int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

struct Node {
    int c, num;
    bool operator<(const Node& rhs) const {
        if (c ^ rhs.c) return c < rhs.c;
        return num > rhs.num;
    }
};

void print(Node v) {
    if (v.c == 0) cout << 'B';
    if (v.c == 1) cout << 'S';
    if (v.c == 2) cout << 'G';
    if (v.c == 3) cout << 'P';
    if (v.c == 4) cout << 'D';
    cout << v.num;
}

int main() {

	cin.tie(NULL); cout.tie(NULL);
	ios_base::sync_with_stdio(false);

	int n; cin >> n;
    vt<Node> a(n);
    EACH(i, a) {
        char c; cin >> c;
        if (c == 'B') i.c = 0;
        if (c == 'S') i.c = 1;
        if (c == 'G') i.c = 2;
        if (c == 'P') i.c = 3;
        if (c == 'D') i.c = 4;
        cin >> i.num;
    }

    for (int i = 0; i < n; i++) {
        for (int j = n - 1; j > i; j--) {
            if (a[j] < a[i]) {
                cout << "KO\n";
                print(a[j]);
                cout << ' ';
                print(a[i]);
                cout << '\n';
                return 0;
            }
        }
    }

    cout << "OK";

	return 0;
}